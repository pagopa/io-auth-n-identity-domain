name: io-mock

services:
  io-session-manager:
    image: io-session-manager
    build:
      context: ./
      dockerfile: ./docker/server/Dockerfile
      args:
        SERVER_NAME: "io-session-manager"
      # this is needed to prevent failures during container build
      # for a regression introduced in docker compose.
      # more infos in https://github.com/docker/compose/issues/12892
      additional_contexts:
        io-lollipop: service:io-lollipop
        io-profile: service:io-profile
    env_file:
      - ./docker/generated/.env.io-session-manager
    volumes:
      - ./apps/io-session-manager/certs:/usr/src/app/apps/io-session-manager/certs:cached
    ports:
      - 8081:3000
      - 5859:5859
    command: ["yarn", "start:debug"]
    depends_on:
      cluster-builder:
        condition: service_started
      traefik:
        condition: service_started
      spid-testenv2:
        condition: service_started
      storage:
        condition: service_started
      io-profile:
        condition: service_started
      io-lollipop:
        condition: service_started
      servicebus:
        condition: service_started
    networks:
      - io-fn
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.io-session-manager.rule=PathPrefix(`/sm`)"
      - "traefik.http.routers.io-session-manager.entrypoints=websecure"
      # leveraging TLS termination, traefik will take https external request,
      # try to forward HTTPS traffic to internal container network, it fails and
      # tries to forward requests in plain HTTP
      - "traefik.http.routers.io-session-manager.tls=true"
      - "traefik.http.services.io-session-manager.loadBalancer.server.port=3000"
      # apply middleware to route
      - "traefik.http.routers.io-session-manager.middlewares=io-session-manager-stripprefix"

  io-lollipop:
    image: io-lollipop
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-lollipop"
      additional_contexts:
        cosmosdb: service:cosmosdb
    env_file:
      - ./docker/generated/.env.io-lollipop
    volumes:
      - ./apps/io-lollipop/host.json:/usr/src/app/apps/io-lollipop/host.json
      - ./apps/io-lollipop/src/__integrations__:/usr/src/app/apps/io-lollipop/src/__integrations__
    ports:
      - ${FUNCTION_LOLLIPOP_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - cosmosdb
      - storage
    labels:
      - "traefik.enable=true"
      # BUG HERE WITH DOUBLE FORWARD SLASH
      - "traefik.http.routers.io-lollipop.rule=PathPrefix(`//lollipop`)"
      - "traefik.http.routers.io-lollipop.entrypoints=web"
      # apply middleware to route
      - "traefik.http.routers.io-lollipop.middlewares=io-lollipop-stripprefix,setHeader"
    extra_hosts:
      - "host.docker.internal:host-gateway"

  io-web-profile:
    image: io-web-profile
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-web-profile"
    env_file:
      - ./docker/generated/.env.io-web-profile
    ports:
      - ${FUNCTION_WEB_PROFILE_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage

  io-profile-async:
    image: io-profile-async
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-profile-async"
    env_file:
      - ./docker/generated/.env.io-profile-async
    ports:
      - ${FUNCTION_PROFILE_ASYNC_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage
      - cosmosdb
      - servicebus

  io-profile:
    image: io-profile
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-profile"
      additional_contexts:
        cosmosdb: service:cosmosdb
    env_file:
      - ./docker/generated/.env.io-profile
    ports:
      - ${FUNCTION_PROFILE_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage
      - cosmosdb
      - mailhog

  io-public:
    image: io-public
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-public"
    env_file:
      - ./docker/generated/.env.io-public
    ports:
      - ${FUNCTION_PUBLIC_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage
      - cosmosdb

  io-fast-login:
    image: io-fast-login
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-fast-login"
    env_file:
      - ./docker/generated/.env.io-fast-login
    ports:
      - ${FUNCTION_FAST_LOGIN_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - io-lollipop
      - io-session-manager
      - storage
      - cosmosdb
      - redis-standalone

  io-session-manager-internal:
    image: io-session-manager-internal
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-session-manager-internal"
    env_file:
      - ./docker/generated/.env.io-session-manager-internal
    ports:
      - ${FUNCTION_SESSION_MANAGER_INTERNAL_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - cluster-builder
      - servicebus

  cosmosdb:
    image: cosmosdb
    build:
      context: ./
      dockerfile: ./docker/cosmosdb/Dockerfile
    env_file:
      - ./docker/generated/.env.cosmosdb
    ports:
      - ${COSMOSDB_PORT}:3000
    networks:
      - io-fn

  spid-testenv2:
    container_name: spid-testenv2
    image: italia/spid-testenv2
    ports:
      - "8088:8088"
    volumes:
      - "./docker/testenv2/conf:/app/conf:cached"
    networks:
      - io-fn

  traefik:
    image: traefik:v2.8
    command: |-
      --entrypoints.web.address=:80
      --entrypoints.web.forwardedHeaders.insecure=true
      --entrypoints.websecure.address=:8080
      --entrypoints.websecure.forwardedHeaders.insecure=true
      --providers.docker=true
      --providers.docker.network=io-fn
      --log.level=ERROR
    ports:
      - ${API_GATEWAY_PORT:-80}:${API_GATEWAY_PORT:-80}
      - 8080:8080
    networks:
      - io-fn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      # define middleware to be used in some functions services
      - "traefik.http.middlewares.io-session-manager-stripprefix.stripprefix.prefixes=/sm"
      - "traefik.http.middlewares.io-lollipop-stripprefix.stripprefix.prefixes=//lollipop"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-id=unused"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-subscription-id=unused"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-groups=${REQ_USER_GROUPS}"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-email=unused@example.com"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-note=unused"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-functions-key=unused"

  #
  #                   __ __            __             __
  #   .----.-----.--|  |__.-----.----|  .--.--.-----|  |_.-----.----.
  #  |   _|  -__|  _  |  |__ --|  __|  |  |  |__ --|   _|  -__|   _|
  # |__| |_____|_____|__|_____|____|__|_____|_____|____|_____|__|
  #
  #
  redis-cluster:
    image: redis:7.0-alpine
    networks:
      - io-fn
    ports:
      - 6379:6379
    volumes:
      - ./docker/redis/6379/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-cluster-data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    # The following depends_on is needed to ensure that all nodes are started
    # by simply starting the `redis-cluster` service.
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5

  redis-node-0:
    image: redis:7.0-alpine
    networks:
      - io-fn
    ports:
      - 6380:6380
    volumes:
      - ./docker/redis/6380/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-node-0-data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  redis-node-1:
    image: redis:7.0-alpine
    networks:
      - io-fn
    ports:
      - 6381:6381
    volumes:
      - ./docker/redis/6381/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-node-1-data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  
  redis-node-2:
    image: redis:7.0-alpine
    networks:
      - io-fn
    ports:
      - 6382:6382
    volumes:
      - ./docker/redis/6382/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-node-2-data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  redis-node-3:
    image: redis:7.0-alpine
    networks:
      - io-fn
    ports:
      - 6383:6383
    volumes:
      - ./docker/redis/6383/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-node-3-data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
  
  redis-node-4:
    image: redis:7.0-alpine
    networks:
      - io-fn
    ports:
      - 6384:6384
    volumes:
      - ./docker/redis/6384/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-node-4-data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]

  redis-node-5:
    image: redis:7.0-alpine
    networks:
      - io-fn
    ports:
      - 6385:6385
    volumes:
      - ./docker/redis/6385/redis.conf:/usr/local/etc/redis/redis.conf
      - redis-node-5-data:/data
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
  
  cluster-builder:
    image: redis:7.0-alpine
    ports:
      - 6999:6999
    networks:
      - io-fn
    command: |-
      redis-cli
      -a bitnami
      -p 6379
      --cluster create
      redis-cluster:6379
      redis-node-0:6380
      redis-node-1:6381
      redis-node-2:6382
      redis-node-3:6383
      redis-node-4:6384
      redis-node-5:6385
      --cluster-replicas 1
      --cluster-yes
    depends_on:
      - redis-cluster
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5


  # Redis standalone (used by `io-fast-login`)
  redis-standalone:
    image: redis:6.0-alpine
    ports:
      - "${REDIS_STANDALONE_PORT}:6379"
    command: >
      --requirepass ${REDIS_STANDALONE_PASSWORD}
    networks:
      - io-fn

  storage:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: storage
    hostname: azurite
    restart: always
    command: "azurite --blobHost 0.0.0.0 --blobPort 20003 --queueHost 0.0.0.0 --queuePort 20004 --tableHost 0.0.0.0 --tablePort 20005"
    ports:
      - "20003:20003"
      - "20004:20004"
      - "20005:20005"
    networks:
      - io-fn

  mailhog:
    image: mailhog/mailhog
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    networks:
      - io-fn

  servicebus:
    image: mcr.microsoft.com/azure-messaging/servicebus-emulator
    container_name: servicebus
    hostname: servicebus
    restart: always
    volumes:
      - "./docker/servicebus/config.json:/ServiceBus_Emulator/ConfigFiles/Config.json:cached"
    ports:
      - "5672:5672"
      - "5300:5300"
    env_file:
      - ./docker/generated/.env.servicebus
    depends_on:
      - sqledge
    networks:
      - io-fn

  sqledge:
    image: mcr.microsoft.com/azure-sql-edge
    container_name: sqledge
    hostname: sqledge
    restart: always
    networks:
      - io-fn
    env_file:
      - ./docker/generated/.env.servicebus

networks:
  # same network name for interoperability with io-mock docker-compose
  io-fn:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  redis-cluster-data:
  redis-node-0-data:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
  redis-node-4-data:
  redis-node-5-data:
