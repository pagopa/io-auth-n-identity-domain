# this will ensure compatibility with io-mock docker-compose
# you can, for example, run io-backend on io-mock and
# redis-cluster and session-manager here
#
# NOTE: make sure to disable redis-cluster dependency for io-backend service in
# io-mock docker-compose
name: io-mock

services:
  io-session-manager:
    image: io-session-manager
    build:
      context: ./
      dockerfile: ./docker/server/Dockerfile
      args:
        SERVER_NAME: "io-session-manager"
    env_file:
      - ./docker/generated/.env.io-session-manager
    volumes:
      - ./apps/io-session-manager/certs:/usr/src/app/apps/io-session-manager/certs:cached
    ports:
      - 8081:3000
    command: ["yarn", "start"]
    depends_on:
      redis-cluster:
        condition: service_healthy
      spid-testenv2:
        condition: service_started
      storage:
        condition: service_started
      io-profile:
        condition: service_started
      io-lollipop:
        condition: service_started
    networks:
      - io-fn

  io-lollipop:
    image: io-lollipop
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-lollipop"
    env_file:
      - ./docker/generated/.env.io-lollipop
    volumes:
      - ./apps/io-lollipop/host.json:/usr/src/app/apps/io-lollipop/host.json
      - ./apps/io-lollipop/src/__integrations__:/usr/src/app/apps/io-lollipop/src/__integrations__
    ports:
      - ${FUNCTION_LOLLIPOP_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - cosmosdb
      - storage
    labels:
      - "traefik.enable=true"
      # BUG HERE WITH DOUBLE FORWARD SLASH
      - "traefik.http.routers.io-lollipop.rule=PathPrefix(`//lollipop`)"
      - "traefik.http.routers.io-lollipop.entrypoints=web"
      # apply middleware to route
      - "traefik.http.routers.io-lollipop.middlewares=io-lollipop-stripprefix,setHeader"

  io-web-profile:
    image: io-web-profile
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-web-profile"
    env_file:
      - ./docker/generated/.env.io-web-profile
    ports:
      - ${FUNCTION_WEB_PROFILE_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage

  io-profile-async:
    image: io-profile-async
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-profile-async"
    env_file:
      - ./docker/generated/.env.io-profile-async
    ports:
      - ${FUNCTION_PROFILE_ASYNC_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage
      - cosmosdb

  io-profile:
    image: io-profile
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-profile"
    env_file:
      - ./docker/generated/.env.io-profile
    ports:
      - ${FUNCTION_PROFILE_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage
      - cosmosdb
      - mailhog

  io-public:
    image: io-public
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-public"
    env_file:
      - ./docker/generated/.env.io-public
    ports:
      - ${FUNCTION_PUBLIC_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - storage
      - cosmosdb

  io-fast-login:
    image: io-fast-login
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-fast-login"
    env_file:
      - ./docker/generated/.env.io-fast-login
    ports:
      - ${FUNCTION_FAST_LOGIN_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - io-lollipop
      - io-session-manager
      - storage
      - cosmosdb
      - redis-standalone

  io-session-manager-internal:
    image: io-session-manager-internal
    build:
      context: ./
      dockerfile: ./docker/function/Dockerfile
      args:
        FUNCTION_NAME: "io-session-manager-internal"
    env_file:
      - ./docker/generated/.env.io-session-manager-internal
    ports:
      - ${FUNCTION_SESSION_MANAGER_INTERNAL_PORT}:7071
    networks:
      - io-fn
    depends_on:
      - redis-cluster

  cosmosdb:
    image: cosmosdb
    build:
      context: ./
      dockerfile: ./docker/cosmosdb/Dockerfile
    env_file:
      - ./docker/generated/.env.cosmosdb
    ports:
      - ${COSMOSDB_PORT}:3000
    networks:
      - io-fn

  spid-testenv2:
    container_name: spid-testenv2
    image: italia/spid-testenv2
    ports:
      - "8088:8088"
    volumes:
      - "./docker/testenv2/conf:/app/conf:cached"
    networks:
      - io-fn

  traefik:
    image: traefik:v2.8
    command: |-
      --entrypoints.web.address=:80
      --entrypoints.web.forwardedHeaders.insecure=true
      --entrypoints.websecure.address=:8080
      --entrypoints.websecure.forwardedHeaders.insecure=true
      --providers.docker=true
      --providers.docker.network=io-fn
      --log.level=ERROR
    ports:
      - ${API_GATEWAY_PORT:-80}:${API_GATEWAY_PORT:-80}
      - 8080:8080
    networks:
      - io-fn
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      # define middleware to be used in some functions services
      - "traefik.http.middlewares.io-lollipop-stripprefix.stripprefix.prefixes=//lollipop"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-id=unused"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-subscription-id=unused"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-groups=${REQ_USER_GROUPS}"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-email=unused@example.com"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-user-note=unused"
      - "traefik.http.middlewares.setHeader.headers.customrequestheaders.x-functions-key=unused"

  #
  #                   __ __            __             __
  #   .----.-----.--|  |__.-----.----|  .--.--.-----|  |_.-----.----.
  #  |   _|  -__|  _  |  |__ --|  __|  |  |  |__ --|   _|  -__|   _|
  # |__| |_____|_____|__|_____|____|__|_____|_____|____|_____|__|
  #
  #
  redis-node-0:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6380:6379
    volumes:
      - redis-node-0-data:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"

  redis-node-1:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6381:6379
    volumes:
      - redis-node-1-data:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"

  redis-node-2:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6382:6379
    volumes:
      - redis-node-2-data:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"

  redis-node-3:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6383:6379
    volumes:
      - redis-node-3-data:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"

  redis-node-4:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6384:6379
    volumes:
      - redis-node-4-data:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"

  redis-node-5:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6385:6379
    volumes:
      - redis-node-5-data:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"

  redis-node-6:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6386:6379
    volumes:
      - redis-node-6-data:/bitnami/redis/data
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"

  redis-cluster:
    image: docker.io/bitnami/redis-cluster:6.2
    networks:
      - io-fn
    ports:
      - 6379:6379
    volumes:
      - redis-cluster-data:/bitnami/redis/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "bitnami", "-c", "--raw", "incr", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
    depends_on:
      - redis-node-0
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
    environment:
      - "REDIS_PASSWORD=bitnami"
      - "REDISCLI_AUTH=bitnami"
      - "REDIS_CLUSTER_REPLICAS=1"
      - "REDIS_NODES=redis-cluster redis-node-0 redis-node-1 redis-node-2 redis-node-3 redis-node-4 redis-node-5 redis-node-6"
      - "REDIS_CLUSTER_CREATOR=yes"

  # Redis standalone (used by `io-fast-login`)
  redis-standalone:
    image: redis:6.0-alpine
    ports:
      - "${REDIS_STANDALONE_PORT}:6379"
    command: >
      --requirepass ${REDIS_STANDALONE_PASSWORD}
    networks:
      - io-fn

  storage:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: storage
    hostname: azurite
    restart: always
    command: "azurite --blobHost 0.0.0.0 --blobPort 20003 --queueHost 0.0.0.0 --queuePort 20004 --tableHost 0.0.0.0 --tablePort 20005"
    ports:
      - "20003:20003"
      - "20004:20004"
      - "20005:20005"
    networks:
      - io-fn

  mailhog:
    image: mailhog/mailhog
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    networks:
      - io-fn

networks:
  # same network name for interoperability with io-mock docker-compose
  io-fn:
    driver: bridge
    driver_opts:
      com.docker.network.driver.mtu: 1450

volumes:
  redis-node-0-data:
  redis-node-1-data:
  redis-node-2-data:
  redis-node-3-data:
  redis-node-4-data:
  redis-node-5-data:
  redis-node-6-data:
  redis-cluster-data:
