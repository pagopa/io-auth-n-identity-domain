# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log

# Ignore any .tfvars files that are generated automatically for each Terraform run. Most
# .tfvars files are managed as part of configuration and so should be included in
# version control.
#
# example.tfvars

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
#
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

*.DS_Store
*.log
*.h2.db
__TMP
.metals/
__azurite_*
/.idea
.bastianhost.ini
**/modules/**/.terraform.lock.hcl
**/_modules/**/.terraform.lock.hcl


# Dependencies
node_modules
**/.pnp.*
**/.yarn/*
!**/.yarn/patches
!**/.yarn/plugins
!**/.yarn/releases
!**/.yarn/sdks
!**/.yarn/versions

# Local env files
.env
**/.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# Testing
coverage

# Turbo
.turbo

# Vercel
.vercel

# Build Outputs
.next/
out/
build
dist


# Debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Misc
.DS_Store
*.pem

# Docker
docker-compose.override.yml

bin
obj
csx
.vs
edge
Publish

*.user
*.suo
*.cscfg
*.Cache
project.lock.json

**/packages
!/packages
TestResults

**/tools/NuGet.exe
App_Data
secrets
data
.secrets
appsettings.json
local.settings.json

# Local python packages
.python_packages/

# Python Environments
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Byte-compiled / optimized / DLL files
**/__pycache__/
*.py[cod]
*$py.class

yarn-error.log
**/src/generated/**/*

# eslint section
!.eslintrc.js
.eslintcache

# integration tests
**/__integrations__/environments/generated/**

# vitest
vite.config.*.timestamp-*

azure-functions-core-tools
