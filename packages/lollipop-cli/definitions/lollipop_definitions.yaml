openapi: 3.0.1
info:
  title: LolliPoP Model Definitions
  description: The definitions of the models needed by the LolliPoP protocol. This file is used ONLY for type generation purposes
  version: 1.0.0

# Dummy unused endpoint
paths:
  /dummy:
    get:
      responses:
        "200":
          description: "ok"

components:
  parameters:
    # --------------------------------------------
    # Custom LolliPoP headers
    # --------------------------------------------
    LollipopMethodHeader:
      name: x-pagopa-lollipop-original-method
      in: header
      description: The method of the endpoint called by IO app
      required: true
      schema:
        $ref: "#/components/schemas/LollipopMethod"
    LollipopOriginalURLHeader:
      name: x-pagopa-lollipop-original-url
      in: header
      description: The url of the endpoint called by IO app
      required: true
      schema:
        $ref: "#/components/schemas/LollipopOriginalURL"
    LollipopAssertionTypeHeader:
      name: x-pagopa-lollipop-assertion-type
      in: header
      description: The assertion type (SAML / OIDC)
      required: true
      schema:
        $ref: '#/components/schemas/AssertionType'
    LollipopUserIdHeader:
      name: x-pagopa-lollipop-user-id
      in: header
      description: User's fiscal code.
      required: true
      schema:
        $ref: '#/components/schemas/LollipopUserId'
    LollipopAuthJWTHeader:
      name: x-pagopa-lollipop-auth-jwt
      in: header
      description: Auth token to retrieve the SPID/CIE User identity from IO
      required: true
      schema:
        $ref: '#/components/schemas/LollipopJWTAuthorization'
    LollipopPublicKeyHeader:
      name: x-pagopa-lollipop-public-key
      in: header
      description: User's public key
      required: true
      schema:
        $ref: '#/components/schemas/LollipopPublicKey'
    LollipopAssertionRefHeader:
      name: x-pagopa-lollipop-assertion-ref
      in: header
      description: The id of the assertion to retrieve
      required: true
      schema:
        $ref: '#/components/schemas/AssertionRef'
    JwkPubKeyToken:
      in: header
      name: x-pagopa-lollipop-pub-key
      type: string
      description: represents a Base64url encode of a JWK Public Key
      format: JwkPublicKeyFromToken
      x-import: '@pagopa/ts-commons/lib/jwk'
      example: "eyJrdHkiOiJFQyIsImNydiI6IlAtMjU2IiwieCI6IjRmMzB6dUdNcm9kRXl3cEoxelZKbWFRLVYtZlM4OVZBTW8yZnN6dWxOTmsiLCJ5IjoibG5NdmExengxaFJncVY5enVEU3dkV0dyUlhTREl4UXQ1YVJVeG1EVW44NCJ9"
    JwkPubKeyHashAlgorithm:
      in: header
      name: x-pagopa-lollipop-pub-key-hash-algo
      type: string
      enum: [sha256, sha384, sha512]
      description: Represents the selected hashing algorithm for jwk thumbprint
      example: "sha256"
    # --------------------------------------------
    # Standard HTTP Message Signatures headers
    # --------------------------------------------
    LollipopContentTypeHeader:
      name: content-type
      in: header
      description: The content type, if any.
      required: false
      schema:
        $ref: "#/components/schemas/LollipopContentType"
    LollipopContentDigestHeader:
      name: content-digest
      in: header
      description: The body digest, if any, as defined in https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-digest-headers-10
      required: false
      schema:
        $ref: "#/components/schemas/LollipopContentDigest"

    LollipopSignatureInputHeader:
      name: signature-input
      in: header
      description: The signature input, needed to verify the `signature` header
      required: true
      schema:
        $ref: "#/components/schemas/LollipopSignatureInput"
    LollipopSignatureHeader:
      name: signature
      in: header
      description: The signature of the HTTP request, signed by the client with its private key.
      required: true
      schema:
        $ref: "#/components/schemas/LollipopSignature"
  schemas:
    LollipopMethod:
      description: |
        The original request method.
        MUST be inside the x-pagopa-lollipop-original-method header.
      type: string
      enum:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE

    LollipopOriginalURL:
      description: |
        The original request URL.
        MUST be inside the x-pagopa-lollipop-original-url header.
      type: string
      pattern: ^https://

    LollipopUserId:
      type: string
      description: |
        User's fiscal code, MUST be inside x-pagopa-lollipop-user-id header.
      format: FiscalCode
      x-import: '@pagopa/ts-commons/lib/strings'
      example: SPNDNL80R13C555X

    LollipopJWTAuthorization:
      description: |
        JWT authorizing the access to an assertion, 
        MUST be inside x-pagopa-lollipop-auth-jwt header
      type: string
      minLength: 1

    LollipopPublicKey:
      description: |
        Represents a Base64url encode of a JWK Public Key.
        MUST be inside x-pagopa-lollipop-public-key header
      type: string
      minLength: 1
    
    LollipopSignatureInput:
      description: |
        Content of the signature-input header, as described in 
        https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-message-signatures#name-the-signature-input-http-fi
      type: string
      pattern: ^(((sig[0-9]+)=[^,]*?)(, ?)?)+$

    LollipopSignature:
      description: |
        Content of the signature header, as described in 
        https://datatracker.ietf.org/doc/html/draft-ietf-httpbis-message-signatures#name-the-signature-http-field
      type: string
      pattern: ^((sig[0-9]+)=:[A-Za-z0-9+/=]*:(, ?)?)+$

    LollipopContentType:
      type: string
      enum:
        - application/json
        - application/octet-stream

    LollipopContentDigest:
      type: string
      pattern: "^(sha-256=:[A-Za-z0-9+/=]{44}:|sha-384=:[A-Za-z0-9+/=]{66}:|sha-512=:[A-Za-z0-9+/=]{88}:)$"

    AssertionType:
      type: string
      enum:
        - SAML
        - OIDC
    
    AssertionRefSha256:
      type: string
      pattern: "^(sha256-[A-Za-z0-9-_=]{1,44})$"

    AssertionRefSha384:
      type: string
      pattern: "^(sha384-[A-Za-z0-9-_=]{1,66})$"

    AssertionRefSha512:
      type: string
      pattern: "^(sha512-[A-Za-z0-9-_=]{1,88})$"

    AssertionRef:
      oneOf:
        - $ref: "#/components/schemas/AssertionRefSha256"
        - $ref: "#/components/schemas/AssertionRefSha384"
        - $ref: "#/components/schemas/AssertionRefSha512"

    AssertionFileName:
      type: string
      description: fiscal code - AssertionRefSha256 | AssertionRefSha384 | AssertionRefSha512
      pattern: "^[A-Z]{6}[0-9LMNPQRSTUV]{2}[ABCDEHLMPRST][0-9LMNPQRSTUV]{2}[A-Z][0-9LMNPQRSTUV]{3}[A-Z]-(sha256-[A-Za-z0-9-_=]{1,44}|sha384-[A-Za-z0-9-_=]{1,66}|sha512-[A-Za-z0-9-_=]{1,88})$"

    OperationId:
      type: string
      minLength: 1

    UUIDv4Nonce:
      type: string
      pattern: >-
        ^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$
      description: UUID v4 formatted nonce as per RFC 4122
      example: 870c6d89-a3c4-48b1-a796-cdacddaf94b4
